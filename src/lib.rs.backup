#![no_std]

use soroban_sdk::{
    contract, contractimpl, contracttype, symbol_short,
    Address, Env, String, Symbol, Map
};

// Simplified data structures
#[contracttype]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct SimpleMetadata {
    pub name: String,
    pub symbol: String,
    pub total_supply: i128,
}

// Storage keys
const ADMIN: Symbol = symbol_short!("ADMIN");
const METADATA: Symbol = symbol_short!("METADATA");
const SUPPLY: Symbol = symbol_short!("SUPPLY");
const PAUSED: Symbol = symbol_short!("PAUSED");
const BALANCES: Symbol = symbol_short!("BALANCE");

#[contract]
pub struct SimpleRWAContract;

#[contractimpl]
impl SimpleRWAContract {
    
    /// Simple initialization with just admin and name
    pub fn init_simple(env: Env, admin: Address, name: String, symbol: String) {
        if env.storage().instance().has(&ADMIN) {
            panic!("Already initialized");
        }
        
        env.storage().instance().set(&ADMIN, &admin);
        
        let metadata = SimpleMetadata {
            name,
            symbol,
            total_supply: 0,
        };
        env.storage().instance().set(&METADATA, &metadata);
        env.storage().instance().set(&SUPPLY, &0i128);
        env.storage().instance().set(&PAUSED, &false);
        
        let balances: Map<Address, i128> = Map::new(&env);
        env.storage().instance().set(&BALANCES, &balances);
    }
    
    /// Mint tokens (admin only)
    pub fn mint(env: Env, to: Address, amount: i128) {
        let admin: Address = env.storage().instance().get(&ADMIN).unwrap();
        admin.require_auth();
        
        let mut balances: Map<Address, i128> = 
            env.storage().instance().get(&BALANCES).unwrap_or(Map::new(&env));
        let current_balance = balances.get(to.clone()).unwrap_or(0);
        balances.set(to, current_balance + amount);
        env.storage().instance().set(&BALANCES, &balances);
        
        let current_supply: i128 = env.storage().instance().get(&SUPPLY).unwrap_or(0);
        env.storage().instance().set(&SUPPLY, &(current_supply + amount));
    }
    
    /// Transfer tokens
    pub fn transfer(env: Env, from: Address, to: Address, amount: i128) {
        from.require_auth();
        
        let mut balances: Map<Address, i128> = 
            env.storage().instance().get(&BALANCES).unwrap_or(Map::new(&env));
        let from_balance = balances.get(from.clone()).unwrap_or(0);
        
        if from_balance < amount {
            panic!("Insufficient balance");
        }
        
        let to_balance = balances.get(to.clone()).unwrap_or(0);
        balances.set(from, from_balance - amount);
        balances.set(to, to_balance + amount);
        env.storage().instance().set(&BALANCES, &balances);
    }
    
    /// Get balance
    pub fn balance(env: Env, address: Address) -> i128 {
        let balances: Map<Address, i128> = 
            env.storage().instance().get(&BALANCES).unwrap_or(Map::new(&env));
        balances.get(address).unwrap_or(0)
    }
    
    /// View functions
    pub fn get_admin(env: Env) -> Address {
        env.storage().instance().get(&ADMIN).unwrap()
    }
    
    pub fn get_metadata(env: Env) -> SimpleMetadata {
        env.storage().instance().get(&METADATA).unwrap()
    }
    
    pub fn get_total_supply(env: Env) -> i128 {
        env.storage().instance().get(&SUPPLY).unwrap_or(0)
    }
    
    pub fn is_paused(env: Env) -> bool {
        env.storage().instance().get(&PAUSED).unwrap_or(false)
    }
}
